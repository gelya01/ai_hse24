import random
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from db import SessionLocal
from models.exercise_log import ExerciseLog
from models.user import User
from services.translator import translate_to_english
from services.workout import get_exercise_info

router = Router()

stickers = [
    "CAACAgIAAxkBAAExqd9nq6ou85itPa_B4EKCfIp5AhtVowACYx8AAosjyEqFa8uEhVY3OzYE",
    "CAACAgIAAxkBAAExqeVnq6qAsGZmYKinhGygZEIaILAH6AACjxkAAkiMyUpBH-Q-bjBkzDYE"
    "CAACAgIAAxkBAAExqfNnq6vXQ5rRCBuwa_k1AdFs0dFh5gAC-iIAAr9byUpLYQOhDaYNtzYE",
    "CAACAgIAAxkBAAExqfVnq6v6jAZfJQsM2yojP9Cvkv2v3wACwhsAAvelAAFLym-W5FyKrPQ2BA",
    "CAACAgIAAxkBAAExqflnq6wME5n02MKLErM3UxnW-NM0SgACRxkAAqG6AAFLG3z-FzoJ5qY2BA",
]


@router.message(Command("log_workout"))
async def log_workout(message: Message):
    workout_text = message.text.replace("/log_workout", "").strip()
    parts = workout_text.split()
    if len(parts) < 2 or not parts[-1].isdigit():
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä:\n" "/log_workout –±–µ–≥ 30"
        )
        return

    exercise_name = " ".join(parts[:-1])
    duration = int(parts[-1])

    if duration <= 0:
        await message.answer("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –º–∏–Ω—É—Ç!")
        return

    translated_exercise = await translate_to_english(exercise_name)
    exercise_info = await get_exercise_info(translated_exercise, duration)

    if not exercise_info:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ-–¥—Ä—É–≥–æ–º—É."
        )
        return

    calories_burned = exercise_info["calories"]
    additional_water = exercise_info["additional_water"]

    async with SessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer(
                "–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile"
            )
            return

        exercise_log_entry = ExerciseLog(
            user_id=message.from_user.id,
            exercise_name=exercise_name,
            duration=duration,
            calories_burned=calories_burned,
        )
        session.add(exercise_log_entry)

        if additional_water > 0:
            user.daily_water += additional_water / 1000

        await session.commit()

    random_sticker = random.choice(stickers)

    await message.answer(
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞:\n"
        f"üîπ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise_name} ({duration} –º–∏–Ω)\n"
        f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_burned} –∫–∫–∞–ª\n"
        f"üíß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–µ–π—Ç–µ: {additional_water:.0f} –º–ª –≤–æ–¥—ã!"
    )
    await message.answer_sticker(random_sticker)
