from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db import SessionLocal
from models.user import User
from services.calculations import calculate_daily_calories, calculate_daily_water
from services.weather import get_temperature
from services.translator import translate_to_english

router = Router()


class ProfileState(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_activity = State()
    waiting_for_city = State()
    waiting_for_goal = State()


@router.message(Command("set_profile"))
async def set_profile_start(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª: –º—É–∂—á–∏–Ω–∞ / –∂–µ–Ω—â–∏–Ω–∞")
    await state.set_state(ProfileState.waiting_for_gender)


@router.message(ProfileState.waiting_for_gender)
async def set_gender(message: Message, state: FSMContext):
    gender = message.text.lower()
    if gender not in ["–º—É–∂—á–∏–Ω–∞", "–∂–µ–Ω—â–∏–Ω–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–º—É–∂—á–∏–Ω–∞' –∏–ª–∏ '–∂–µ–Ω—â–∏–Ω–∞'.")
        return
    await state.update_data(gender=gender)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 12 –¥–æ 100):")
    await state.set_state(ProfileState.waiting_for_age)


@router.message(ProfileState.waiting_for_age)
async def set_age(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (12 <= int(message.text) <= 100):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–æ—Ç 12 –¥–æ 100 –ª–µ—Ç)."
        )
        return
    await state.update_data(age=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ (30-300):")
    await state.set_state(ProfileState.waiting_for_weight)


@router.message(ProfileState.waiting_for_weight)
async def set_weight(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (30 <= int(message.text) <= 300):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (30-300 –≤ –∫–≥).")
        return
    await state.update_data(weight=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º (100-250):")
    await state.set_state(ProfileState.waiting_for_height)


@router.message(ProfileState.waiting_for_height)
async def set_height(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (100 <= int(message.text) <= 250):
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (100-250 —Å–º).")
        return
    await state.update_data(height=int(message.text))
    await message.answer(
        "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏? –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É (1-5):\n"
        "1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (—Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏)\n"
        "2. –õ—ë–≥–∫–∏–π (1-3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)\n"
        "3. –°—Ä–µ–¥–Ω–∏–π (3-5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)\n"
        "4. –í—ã—Å–æ–∫–∏–π (5-7 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)\n"
        "5. –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π (—Å–ø–æ—Ä—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω(–∫–∞))"
    )
    await state.set_state(ProfileState.waiting_for_activity)


@router.message(ProfileState.waiting_for_activity)
async def set_activity(message: Message, state: FSMContext):
    if message.text not in ["1", "2", "3", "4", "5"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return
    activity_levels = [1.2, 1.375, 1.55, 1.725, 1.9]
    await state.update_data(activity=activity_levels[int(message.text) - 1])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(ProfileState.waiting_for_city)


@router.message(ProfileState.waiting_for_city)
async def set_city(message: Message, state: FSMContext):
    city = message.text.strip()
    translated_city = await translate_to_english(city)
    temperature = await get_temperature(translated_city)
    await state.update_data(city=city, temperature=temperature)
    await message.answer(
        "–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É:\n"
        "üîπ –ü–æ—Ö—É–¥–µ–Ω–∏–µ\n"
        "üîπ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ\n"
        "üîπ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã"
    )
    await state.set_state(ProfileState.waiting_for_goal)


@router.message(ProfileState.waiting_for_goal)
async def set_goal(message: Message, state: FSMContext):
    goal = message.text.lower()
    if goal not in ["–ø–æ—Ö—É–¥–µ–Ω–∏–µ", "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ", "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã"]:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å: '–ü–æ—Ö—É–¥–µ–Ω–∏–µ', '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ' –∏–ª–∏ '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã'."
        )
        return
    await state.update_data(goal=goal)

    user_data = await state.get_data()

    daily_calories = calculate_daily_calories(
        user_data["weight"],
        user_data["height"],
        user_data["age"],
        user_data["gender"],
        user_data["activity"],
        goal,
    )

    daily_water = calculate_daily_water(user_data["weight"], user_data["activity"])

    if user_data["temperature"] and user_data["temperature"] > 25:
        daily_water += 0.5

    user_data.pop(
        "temperature", None
    )  # —É–±–∏—Ä–∞–µ–º temperature, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users

    async with SessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if user:
            user.age = user_data["age"]
            user.weight = user_data["weight"]
            user.height = user_data["height"]
            user.gender = user_data["gender"]
            user.activity = user_data["activity"]
            user.goal = goal
            user.city = user_data["city"]
            user.daily_calories = daily_calories
            user.daily_water = daily_water
        else:
            user = User(
                id=message.from_user.id,
                **user_data,
                daily_calories=daily_calories,
                daily_water=daily_water,
            )
        session.add(user)
        await session.commit()

    await message.answer(
        f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
        f"üìä –í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞:\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {daily_calories:.0f} –∫–∫–∞–ª\n"
        f"üíß –í–æ–¥–∞: {daily_water:.1f} –ª\n"
    )
    await state.clear()
