from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from db import SessionLocal
from models.water_log import WaterLog
from models.user import User
from sqlalchemy import select, func
from datetime import date

router = Router()


@router.message(Command("log_water"))
async def log_water(message: Message):
    water_text = message.text.replace("/log_water", "").strip()

    if not water_text.isdigit():
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª. –ù–∞–ø—Ä–∏–º–µ—Ä:\n" "/log_water 250"
        )
        return

    water_amount = int(water_text)

    async with SessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer(
                "–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile"
            )
            return

        water_log_entry = WaterLog(user_id=message.from_user.id, amount=water_amount)
        session.add(water_log_entry)
        await session.commit()
        # —Ä–∞—Å—á–µ—Ç –≤–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = date.today()
        total_water_ml = await session.execute(
            select(func.sum(WaterLog.amount)).where(
                WaterLog.user_id == message.from_user.id,
                func.date(WaterLog.timestamp) == today,
            )
        )
        total_water_ml = total_water_ml.scalar() or 0

        daily_water_ml = int(user.daily_water * 1000)  # –∏–∑ –ª–∏—Ç—Ä–æ–≤ –≤ –º–ª
        remaining_water = max(0, daily_water_ml - total_water_ml)

    await message.answer(
        f"üíß –í—ã –≤—ã–ø–∏–ª–∏ {water_amount} –º–ª –≤–æ–¥—ã!\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_water_ml} –º–ª –∏–∑ {daily_water_ml} –º–ª\n"
        f"üíß –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining_water} –º–ª"
    )
