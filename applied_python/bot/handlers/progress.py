from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from db import SessionLocal
from models.user import User
from models.food_log import FoodLog
from models.water_log import WaterLog
from models.exercise_log import ExerciseLog
from sqlalchemy import select, func
from datetime import date

router = Router()


@router.message(Command("check_progress"))
async def check_progress(message: Message):
    async with SessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer(
                "–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile"
            )
            return

        today = date.today()

        food_calories = await session.execute(
            select(func.sum(FoodLog.calories)).where(
                FoodLog.user_id == message.from_user.id,
                func.date(FoodLog.timestamp) == today,
            )
        )
        food_calories = food_calories.scalar() or 0

        exercise_calories = await session.execute(
            select(func.sum(ExerciseLog.calories_burned)).where(
                ExerciseLog.user_id == message.from_user.id,
                func.date(ExerciseLog.timestamp) == today,
            )
        )
        exercise_calories = exercise_calories.scalar() or 0

        water_ml = await session.execute(
            select(func.sum(WaterLog.amount)).where(
                WaterLog.user_id == message.from_user.id,
                func.date(WaterLog.timestamp) == today,
            )
        )
        water_ml = water_ml.scalar() or 0

        calorie_balance = food_calories - exercise_calories
        rem_water = max(0, user.daily_water * 1000 - water_ml)

    progress_message = (
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        f"üíß –í–æ–¥–∞:\n"
        f"   - –í—ã–ø–∏—Ç–æ: {water_ml} –º–ª –∏–∑ {int(user.daily_water * 1000)} –º–ª\n"
        f"   - –û—Å—Ç–∞–ª–æ—Å—å: {rem_water} –º–ª\n\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏:\n"
        f"   - –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {food_calories} –∫–∫–∞–ª –∏–∑ {int(user.daily_calories)} –∫–∫–∞–ª\n"
        f"   - –°–æ–∂–∂–µ–Ω–æ: {exercise_calories} –∫–∫–∞–ª\n"
        f"   - –ë–∞–ª–∞–Ω—Å: {calorie_balance} –∫–∫–∞–ª"
    )

    await message.answer(progress_message)
